{"version":3,"file":"dist/fleet.min.js.map","names":["global","factory","module","exports","window","this","noGlobal","Fleet","constructor","root","document","$el","element","querySelector","$tag","name","classStr","content","$json","text","JSON","parse","e","init","create","elName","Array","isArray","map","createElement","find","id","getElementById","select","query","selectAll","querySelectorAll","child","parent","setAttr","attrsObj","Object","entries","forEach","key","value","setAttribute","getAttr","attrName","getAttribute","setData","dataObj","getData","dataName","setCSS","style","getCSS","cssProp","getComputedCSS","getComputedStyle","getPropertyValue","hasClass","className","classList","contains","addClass","classNames","el","add","removeClass","remove","toggleClass","force","toggle","setText","textContent","innerText","getText","setHTML","htmlCode","innerHTML","getHTML","addHTML","append","appendChild","prepend","rotate","degrees","transform","loadScript","src","script","body","addEvent","event","handler","addEventListener","removeEvent","removeEventListener","ajaxPost","url","token","data","onSuccess","onError","xhr","XMLHttpRequest","open","setRequestHeader","onload","responseText","onerror","send","stringify","ajaxGet","fleet"],"sources":["src/fleet.js"],"sourcesContent":["/*!\n * Fleet v1.0.0\n * https://github.com/RivoLink/fleet\n *\n * Date: 2025-01-13T17:45Z\n */\n(function (global, factory) {\n\n    // Load the factory into the right environment\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        module.exports = factory(global, true);\n    } else {\n        factory(global);\n    }\n\n})(typeof window !== \"undefined\" ? window : this, function (window, noGlobal) {\n\n    class Fleet {\n\n        /**\n         * Constructor for Fleet.\n         * @param {Document|HTMLElement} root The root element to operate within. Defaults to `document`.\n         */\n        constructor(root = document) {\n            this.root = root;\n        }\n\n        /**\n         * Retrieve an element or return the element itself.\n         * @param {String|HTMLElement} element The CSS selector or an element.\n         * @return {HTMLElement} The selected or provided element.\n         */\n        $el(element) {\n            if (typeof element === \"string\") {\n                return this.root.querySelector(element);\n            } else {\n                return element;\n            }\n        }\n\n        /**\n         * Generate an HTML tag string with a specified name, class, and content.\n         * @param {String} name The name of the HTML tag (e.g., \"div\", \"span\").\n         * @param {String} classStr The class attribute for the tag.\n         * @param {String} content The inner content of the tag.\n         * @return {String} A string representing the complete HTML tag.\n         */\n        $tag(name, classStr, content) {\n            return `<${name} class=\"${classStr}\">${content}</${name}>`\n        }\n\n        /**\n         * Safely parse a JSON string into a JavaScript object.\n         * @param {String} text The JSON string to parse.\n         * @return {Object} The parsed JavaScript object, or an empty object if parsing fails.\n         */\n        $json(text) {\n            try {\n                return JSON.parse(text);\n            } catch (e) {\n                return {};\n            }\n        }\n\n        /**\n         * Initialize a new Fleet instance with a specific root element.\n         * @param {HTMLElement} root The root element to use. If null, defaults to document.\n         * @return {Fleet} A new instance of the Fleet class with the specified root.\n         */\n        init(root) {\n            if (typeof root === \"string\") {\n                return new Fleet(document.querySelector(root) || document);\n            } else {\n                return new Fleet(root || document);\n            }\n        }\n\n        /**\n         * Create an HTML element or an array of HTML elements.\n         * @param {String|String[]} elName The tag name or an array of tag names to create.\n         * @return {HTMLElement|HTMLElement[]} The created element(s).\n         */\n        create(elName) {\n            if (Array.isArray(elName)) {\n                return elName.map((name) => this.root.createElement(name));\n            } else {\n                return this.root.createElement(elName);\n            }\n        }\n\n        /**\n         * Find an element by id.\n         * @param {String} id Element id (without #).\n         * @return {HTMLElement|null} The element with the given id, or null if not found.\n         */\n        find(id) {\n            return this.root.getElementById(id);\n        }\n\n        /**\n         * Select the first element that matches the CSS query.\n         * @param {String} query CSS selector query.\n         * @return {HTMLElement|null} The matching element or null if none found.\n         */\n        select(query) {\n            return this.root.querySelector(query);\n        }\n\n        /**\n         * Select all elements that match the CSS query.\n         * @param {String} query CSS selector query.\n         * @return {NodeList} A NodeList of matching elements.\n         */\n        selectAll(query) {\n            return this.root.querySelectorAll(query);\n        }\n\n        /**\n         * Select a child element within a parent element that matches the CSS query.\n         * @param {HTMLElement} parent The parent element.\n         * @param {String} query The CSS selector to find the child element.\n         * @return {HTMLElement|null} The first matching child element or null if none found.\n         */\n        child(parent, query) {\n            return parent.querySelector(query);\n        }\n\n        /**\n         * Set attributes on an element.\n         * @param {HTMLElement} element The target element.\n         * @param {Object} attrsObj An object of attributes to set.\n         * @return {void}\n         */\n        setAttr(element, attrsObj) {\n            Object.entries(attrsObj).forEach(([key, value]) => {\n                this.$el(element).setAttribute(key, value);\n            });\n        }\n\n        /**\n         * Get an attribute from an element.\n         * @param {HTMLElement} element The target element.\n         * @param {String} attrName The attribute name.\n         * @return {String|null} The attribute value or null if not found.\n         */\n        getAttr(element, attrName) {\n            return this.$el(element).getAttribute(attrName);\n        }\n\n        /**\n         * Set data attributes on an element.\n         * @param {HTMLElement} element The target element.\n         * @param {Object} dataObj An object of data attributes to set.\n         * @return {void}\n         */\n        setData(element, dataObj) {\n            Object.entries(dataObj).forEach(([key, value]) => {\n                this.$el(element).setAttribute(`data-${key}`, value);\n            });\n        }\n\n        /**\n         * Get a data attribute from an element.\n         * @param {HTMLElement} element The target element.\n         * @param {String} dataName The data attribute name.\n         * @return {String|null} The data attribute value or null if not found.\n         */\n        getData(element, dataName) {\n            return this.$el(element).getAttribute(`data-${dataName}`);\n        }\n\n        /**\n         * Set inline styles on an element.\n         * @param {HTMLElement} element The target element.\n         * @param {Object} style An object of styles to apply.\n         * @return {void}\n         */\n        setCSS(element, style) {\n            Object.entries(style).forEach(([key, value]) => {\n                this.$el(element).style[key] = value;\n            });\n        }\n\n        /**\n         * Get an inline style property from an element.\n         * @param {HTMLElement} element The target element.\n         * @param {String} cssProp The CSS property name to retrieve.\n         * @return {String} The value of the CSS property.\n         */\n        getCSS(element, cssProp) {\n            return this.$el(element).style[cssProp];\n        }\n\n        /**\n         * Get the computed style of an element.\n         * @param {HTMLElement} element The target element.\n         * @param {String} cssProp The CSS property name to retrieve.\n         * @return {String} The computed value of the CSS property.\n         */\n        getComputedCSS(element, cssProp) {\n            return window.getComputedStyle(this.$el(element)).getPropertyValue(cssProp);\n        }\n\n        /**\n         * Check if an element has a class.\n         * @param {HTMLElement} element The target element.\n         * @param {String} className The class name to check.\n         * @return {Boolean} True if the element has the class, false otherwise.\n         */\n        hasClass(element, className) {\n            return this.$el(element).classList.contains(className);\n        }\n\n        /**\n         * Add one or more classes to an element.\n         * @param {HTMLElement} element The target element.\n         * @param {String|String[]} classNames A class name or array of class names to add.\n         * @return {void}\n         */\n        addClass(element, classNames) {\n            if (!Array.isArray(element)) {\n                element = (typeof element === \"string\") \n                    ? this.root.querySelectorAll(element) \n                    : [element];\n            }\n\n            classNames = Array.isArray(classNames) ? classNames : [classNames];\n            classNames.forEach((name) => element.forEach((el) => this.$el(el).classList.add(name)))\n        }\n\n        /**\n         * Remove one or more classes from an element.\n         * @param {HTMLElement} element The target element.\n         * @param {String|String[]} classNames A class name or array of class names to remove.\n         * @return {void}\n         */\n        removeClass(element, classNames) {\n            if (!Array.isArray(element)) {\n                element = (typeof element === \"string\") \n                    ? this.root.querySelectorAll(element) \n                    : [element];\n            }\n\n            classNames = Array.isArray(classNames) ? classNames : [classNames];\n            classNames.forEach((name) => element.forEach((el) => this.$el(el).classList.remove(name)))\n        }\n\n        /**\n         * Toggle a class on an element.\n         * @param {HTMLElement} element The target element.\n         * @param {String} className The class name to toggle.\n         * @param {Boolean} [force] Whether to force add/remove. Defaults to toggling.\n         * @return {void}\n         */\n        toggleClass(element, className, force) {\n            this.$el(element).classList.toggle(className, force);\n        }\n\n        /**\n         * Set the text content of an element.\n         * @param {HTMLElement} element The target element.\n         * @param {String} textContent The text string to set.\n         * @return {void}\n         */\n        setText(element, textContent) {\n            this.$el(element).innerText = textContent;\n        }\n\n        /**\n         * Get the text content of an element.\n         * @param {HTMLElement} element The target element.\n         * @return {String} The text content of the element.\n         */\n        getText(element) {\n            return this.$el(element).innerText;\n        }\n\n        /**\n         * Set the innerHTML of an element.\n         * @param {HTMLElement} element The target element.\n         * @param {String} htmlCode The HTML string to set.\n         * @return {void}\n         */\n        setHTML(element, htmlCode) {\n            this.$el(element).innerHTML = htmlCode;\n        }\n\n        /**\n         * Get the innerHTML of an element.\n         * @param {HTMLElement} element The target element.\n         * @return {String} The HTML string of the element.\n         */\n        getHTML(element) {\n            return this.$el(element).innerHTML;\n        }\n\n        /**\n         * Add HTML code to an element's existing content.\n         * @param {HTMLElement} element The target element.\n         * @param {String} htmlCode The HTML string to append.\n         * @return {void}\n         */\n        addHTML(element, htmlCode) {\n            this.$el(element).innerHTML += htmlCode;\n        }\n\n        /**\n         * Append a child element or elements to a parent element.\n         * @param {HTMLElement} parent - The parent element to append to.\n         * @param {HTMLElement|HTMLElement[]} child - The child element or an array of child elements to append.\n         * @returns {void}\n         */\n        append(parent, child) {\n            if (Array.isArray(child)) {\n                child.forEach((el) => this.$el(parent).appendChild(this.$el(el)));\n            } else {\n                this.$el(parent).appendChild(this.$el(child));\n            }\n        }\n\n        /**\n         * Prepend a child element or elements to a parent element.\n         * @param {HTMLElement} parent - The parent element to prepend to.\n         * @param {HTMLElement|HTMLElement[]} child - The child element or an array of child elements to prepend.\n         * @returns {void}\n         */\n        prepend(parent, child) {\n            if (Array.isArray(child)) {\n                child.forEach((el) => this.$el(parent).prepend(this.$el(el)));\n            } else {\n                this.$el(parent).prepend(this.$el(child));\n            }\n        }\n\n        /**\n         * Rotate an element by a given number of degrees.\n         * @param {HTMLElement} element - The target element to rotate.\n         * @param {Number} degrees - The number of degrees to rotate the element.\n         * @returns {void}\n         */\n        rotate(element, degrees) {\n            this.setCSS(element, { transform: `rotate(${degrees}deg)` });\n        }\n\n        /**\n         * Load an external script dynamically.\n         * @param {String} src - The source URL of the script to load.\n         * @returns {void}\n         */\n        loadScript(src) {\n            const script = this.create(\"script\");\n            this.setAttr(script, { src });\n            this.append(document.body, script);\n        }\n\n        /**\n         * Add an event listener to an element or elements.\n         * @param {HTMLElement|String|HTMLElement[]} element - The target element(s) or CSS selector for the element(s).\n         * @param {String} event - The event type to listen for (e.g., \"click\").\n         * @param {Function} handler - The event handler function to execute when the event is triggered.\n         * @returns {void}\n         */\n        addEvent(element, event, handler) {\n            if (typeof element === \"string\") {\n                this.selectAll(element).forEach((el) => el.addEventListener(event, handler));\n            } else if (Array.isArray(element)) {\n                element.forEach((el) => this.$el(el).addEventListener(event, handler));\n            } else {\n                this.$el(element).addEventListener(event, handler);\n            }\n        }\n\n        /**\n         * Remove an event listener from an element or elements.\n         * @param {HTMLElement|String|HTMLElement[]} element - The target element(s) or CSS selector for the element(s).\n         * @param {String} event - The event type to remove (e.g., \"click\").\n         * @param {Function} handler - The event handler function to remove.\n         * @returns {void}\n         */\n        removeEvent(element, event, handler) {\n            if (typeof element === \"string\") {\n                this.selectAll(element).forEach((el) => el.removeEventListener(event, handler));\n            } else if (Array.isArray(element)) {\n                element.forEach((el) => this.$el(el).removeEventListener(event, handler));\n            } else {\n                this.$el(element).removeEventListener(event, handler);\n            }\n        }\n\n        /**\n         * Perform an AJAX POST request and send JSON data.\n         * @param {string} url - The URL to send the request to\n         * @param {string} token - The Bearer token for authorization\n         * @param {object} data - The data to send\n         * @param {Function(result, data)} onSuccess - The callback function to handle success response\n         * @param {Function(data)} onError - The callback function to handle error response\n         */\n        ajaxPost(url, token, data, onSuccess, onError) {\n            const xhr = new XMLHttpRequest();\n            xhr.open('POST', url, true);\n            xhr.setRequestHeader('content-type', 'application/json');\n            xhr.setRequestHeader('authorization', 'bearer ' + token);\n            xhr.onload = () => {onSuccess(this.$json(xhr.responseText), data)};\n            xhr.onerror = () => {onError(data)};\n            xhr.send(JSON.stringify(data));\n        }\n\n        /**\n         * Perform an AJAX GET request and retrieve JSON data.\n         * @param {string} url - The URL to send the request to\n         * @param {string} token - The Bearer token for authorization\n         * @param {Function(result)} onSuccess - The callback function to handle success response\n         * @param {Function()} onError - The callback function to handle error response\n         */\n        ajaxGet(url, token, onSuccess, onError) {\n            const xhr = new XMLHttpRequest();\n            xhr.open('GET', url, true);\n            xhr.setRequestHeader('authorization', 'bearer ' + token);\n            xhr.onload = () => {onSuccess(this.$json(xhr.responseText))};\n            xhr.onerror = () => {onError()};\n            xhr.send();\n        }\n    }\n\n    const fleet = new Fleet();\n\n    if (!noGlobal) {\n        window.fleet = fleet;\n    }\n\n    return fleet;\n});\n"],"mappings":"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","ignoreList":[]}